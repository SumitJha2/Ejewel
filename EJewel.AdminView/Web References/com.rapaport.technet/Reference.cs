//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace EJewel.AdminView.com.rapaport.technet {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RapNetInventoryLinkSoap", Namespace="http://technet.rapaport.com/")]
    public partial class RapNetInventoryLink : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthenticationTicketHeader authenticationTicketHeaderValueField;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiamondsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiamondOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RapNetInventoryLink() {
            this.Url = global::EJewel.AdminView.Properties.Settings.Default.EJewel_AdminView_com_rapaport_technet_RapNetInventoryLink;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthenticationTicketHeader AuthenticationTicketHeaderValue {
            get {
                return this.authenticationTicketHeaderValueField;
            }
            set {
                this.authenticationTicketHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event InitCompletedEventHandler InitCompleted;
        
        /// <remarks/>
        public event GetDiamondsCompletedEventHandler GetDiamondsCompleted;
        
        /// <remarks/>
        public event GetDiamondCompletedEventHandler GetDiamondCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/Login", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Login(string Username, string Password) {
            this.Invoke("Login", new object[] {
                        Username,
                        Password});
        }
        
        /// <remarks/>
        public void LoginAsync(string Username, string Password) {
            this.LoginAsync(Username, Password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string Username, string Password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        Username,
                        Password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/Init", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RapNetInventoryLinkParameters Init() {
            object[] results = this.Invoke("Init", new object[0]);
            return ((RapNetInventoryLinkParameters)(results[0]));
        }
        
        /// <remarks/>
        public void InitAsync() {
            this.InitAsync(null);
        }
        
        /// <remarks/>
        public void InitAsync(object userState) {
            if ((this.InitOperationCompleted == null)) {
                this.InitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitOperationCompleted);
            }
            this.InvokeAsync("Init", new object[0], this.InitOperationCompleted, userState);
        }
        
        private void OnInitOperationCompleted(object arg) {
            if ((this.InitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitCompleted(this, new InitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetDiamonds", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDiamonds(RapNetInventoryLinkParameters Params) {
            object[] results = this.Invoke("GetDiamonds", new object[] {
                        Params});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiamondsAsync(RapNetInventoryLinkParameters Params) {
            this.GetDiamondsAsync(Params, null);
        }
        
        /// <remarks/>
        public void GetDiamondsAsync(RapNetInventoryLinkParameters Params, object userState) {
            if ((this.GetDiamondsOperationCompleted == null)) {
                this.GetDiamondsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiamondsOperationCompleted);
            }
            this.InvokeAsync("GetDiamonds", new object[] {
                        Params}, this.GetDiamondsOperationCompleted, userState);
        }
        
        private void OnGetDiamondsOperationCompleted(object arg) {
            if ((this.GetDiamondsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiamondsCompleted(this, new GetDiamondsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationTicketHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://technet.rapaport.com/GetDiamond", RequestNamespace="http://technet.rapaport.com/", ResponseNamespace="http://technet.rapaport.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDiamond(int DiamondID) {
            object[] results = this.Invoke("GetDiamond", new object[] {
                        DiamondID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiamondAsync(int DiamondID) {
            this.GetDiamondAsync(DiamondID, null);
        }
        
        /// <remarks/>
        public void GetDiamondAsync(int DiamondID, object userState) {
            if ((this.GetDiamondOperationCompleted == null)) {
                this.GetDiamondOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiamondOperationCompleted);
            }
            this.InvokeAsync("GetDiamond", new object[] {
                        DiamondID}, this.GetDiamondOperationCompleted, userState);
        }
        
        private void OnGetDiamondOperationCompleted(object arg) {
            if ((this.GetDiamondCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiamondCompleted(this, new GetDiamondCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://technet.rapaport.com/", IsNullable=false)]
    public partial class AuthenticationTicketHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string ticketField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Ticket {
            get {
                return this.ticketField;
            }
            set {
                this.ticketField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public partial class RapNetInventoryLinkParameters {
        
        private RapSpecs[] rapSpecCollectionField;
        
        private Clarities[] clarityCollectionField;
        
        private CuletConditions[] culetConditionCollectionField;
        
        private CuletSizes[] culetSizeCollectionField;
        
        private Colors[] colorCollectionField;
        
        private Shapes[] shapeCollectionField;
        
        private Cuts[] cutCollectionField;
        
        private Polishes[] polishCollectionField;
        
        private Girdles[] girdleCollectionField;
        
        private Labs[] labCollectionField;
        
        private Symmetries[] symmetryCollectionField;
        
        private FancyColors[] fancyColorCollectionField;
        
        private FancyIntensities[] fancyIntensityCollectionField;
        
        private FancyOvertones[] fancyOvertoneCollectionField;
        
        private Treatments[] treatmentCollectionField;
        
        private FluorescenceColors[] fluorescenceColorCollectionField;
        
        private FluorescenceIntensities[] fluorescenceIntensityCollectionField;
        
        private int[] includeMemberCollectionField;
        
        private int[] excludeMemberCollectionField;
        
        private double minSizeField;
        
        private double maxSizeField;
        
        private double minTablePercentField;
        
        private double maxTablePercentField;
        
        private double minDepthPercentField;
        
        private double maxDepthPercentField;
        
        private double measurementDepthMinField;
        
        private double measurementDepthMaxField;
        
        private double measurementWidthMinField;
        
        private double measurementWidthMaxField;
        
        private double measurementLengthMinField;
        
        private double measurementLengthMaxField;
        
        private double minTotalPriceField;
        
        private double maxTotalPriceField;
        
        private double minCaratPriceField;
        
        private double maxCaratPriceField;
        
        private double minDiscountPercentField;
        
        private double maxDiscountPercentField;
        
        private double minRatioField;
        
        private double maxRatioField;
        
        private decimal markupField;
        
        private System.Nullable<int> diamondIDField;
        
        private bool onlyGuaranteedField;
        
        private bool includesCertField;
        
        private bool includes3DFileField;
        
        private bool includesImageField;
        
        private bool onlyMatchedPairField;
        
        private bool onlyMatchedPairSeparableField;
        
        private bool includeTreatmentsField;
        
        private bool onlyTreatmentsField;
        
        private bool includeWhiteDiamondsField;
        
        private bool includeFancyDiamondsField;
        
        private bool includeParcelDiamondsField;
        
        private Locations locationField;
        
        /// <remarks/>
        public RapSpecs[] RapSpecCollection {
            get {
                return this.rapSpecCollectionField;
            }
            set {
                this.rapSpecCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Clarities[] ClarityCollection {
            get {
                return this.clarityCollectionField;
            }
            set {
                this.clarityCollectionField = value;
            }
        }
        
        /// <remarks/>
        public CuletConditions[] CuletConditionCollection {
            get {
                return this.culetConditionCollectionField;
            }
            set {
                this.culetConditionCollectionField = value;
            }
        }
        
        /// <remarks/>
        public CuletSizes[] CuletSizeCollection {
            get {
                return this.culetSizeCollectionField;
            }
            set {
                this.culetSizeCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Colors[] ColorCollection {
            get {
                return this.colorCollectionField;
            }
            set {
                this.colorCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Shapes[] ShapeCollection {
            get {
                return this.shapeCollectionField;
            }
            set {
                this.shapeCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Cuts[] CutCollection {
            get {
                return this.cutCollectionField;
            }
            set {
                this.cutCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Polishes[] PolishCollection {
            get {
                return this.polishCollectionField;
            }
            set {
                this.polishCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Girdles[] GirdleCollection {
            get {
                return this.girdleCollectionField;
            }
            set {
                this.girdleCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Labs[] LabCollection {
            get {
                return this.labCollectionField;
            }
            set {
                this.labCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Symmetries[] SymmetryCollection {
            get {
                return this.symmetryCollectionField;
            }
            set {
                this.symmetryCollectionField = value;
            }
        }
        
        /// <remarks/>
        public FancyColors[] FancyColorCollection {
            get {
                return this.fancyColorCollectionField;
            }
            set {
                this.fancyColorCollectionField = value;
            }
        }
        
        /// <remarks/>
        public FancyIntensities[] FancyIntensityCollection {
            get {
                return this.fancyIntensityCollectionField;
            }
            set {
                this.fancyIntensityCollectionField = value;
            }
        }
        
        /// <remarks/>
        public FancyOvertones[] FancyOvertoneCollection {
            get {
                return this.fancyOvertoneCollectionField;
            }
            set {
                this.fancyOvertoneCollectionField = value;
            }
        }
        
        /// <remarks/>
        public Treatments[] TreatmentCollection {
            get {
                return this.treatmentCollectionField;
            }
            set {
                this.treatmentCollectionField = value;
            }
        }
        
        /// <remarks/>
        public FluorescenceColors[] FluorescenceColorCollection {
            get {
                return this.fluorescenceColorCollectionField;
            }
            set {
                this.fluorescenceColorCollectionField = value;
            }
        }
        
        /// <remarks/>
        public FluorescenceIntensities[] FluorescenceIntensityCollection {
            get {
                return this.fluorescenceIntensityCollectionField;
            }
            set {
                this.fluorescenceIntensityCollectionField = value;
            }
        }
        
        /// <remarks/>
        public int[] IncludeMemberCollection {
            get {
                return this.includeMemberCollectionField;
            }
            set {
                this.includeMemberCollectionField = value;
            }
        }
        
        /// <remarks/>
        public int[] ExcludeMemberCollection {
            get {
                return this.excludeMemberCollectionField;
            }
            set {
                this.excludeMemberCollectionField = value;
            }
        }
        
        /// <remarks/>
        public double MinSize {
            get {
                return this.minSizeField;
            }
            set {
                this.minSizeField = value;
            }
        }
        
        /// <remarks/>
        public double MaxSize {
            get {
                return this.maxSizeField;
            }
            set {
                this.maxSizeField = value;
            }
        }
        
        /// <remarks/>
        public double MinTablePercent {
            get {
                return this.minTablePercentField;
            }
            set {
                this.minTablePercentField = value;
            }
        }
        
        /// <remarks/>
        public double MaxTablePercent {
            get {
                return this.maxTablePercentField;
            }
            set {
                this.maxTablePercentField = value;
            }
        }
        
        /// <remarks/>
        public double MinDepthPercent {
            get {
                return this.minDepthPercentField;
            }
            set {
                this.minDepthPercentField = value;
            }
        }
        
        /// <remarks/>
        public double MaxDepthPercent {
            get {
                return this.maxDepthPercentField;
            }
            set {
                this.maxDepthPercentField = value;
            }
        }
        
        /// <remarks/>
        public double MeasurementDepthMin {
            get {
                return this.measurementDepthMinField;
            }
            set {
                this.measurementDepthMinField = value;
            }
        }
        
        /// <remarks/>
        public double MeasurementDepthMax {
            get {
                return this.measurementDepthMaxField;
            }
            set {
                this.measurementDepthMaxField = value;
            }
        }
        
        /// <remarks/>
        public double MeasurementWidthMin {
            get {
                return this.measurementWidthMinField;
            }
            set {
                this.measurementWidthMinField = value;
            }
        }
        
        /// <remarks/>
        public double MeasurementWidthMax {
            get {
                return this.measurementWidthMaxField;
            }
            set {
                this.measurementWidthMaxField = value;
            }
        }
        
        /// <remarks/>
        public double MeasurementLengthMin {
            get {
                return this.measurementLengthMinField;
            }
            set {
                this.measurementLengthMinField = value;
            }
        }
        
        /// <remarks/>
        public double MeasurementLengthMax {
            get {
                return this.measurementLengthMaxField;
            }
            set {
                this.measurementLengthMaxField = value;
            }
        }
        
        /// <remarks/>
        public double MinTotalPrice {
            get {
                return this.minTotalPriceField;
            }
            set {
                this.minTotalPriceField = value;
            }
        }
        
        /// <remarks/>
        public double MaxTotalPrice {
            get {
                return this.maxTotalPriceField;
            }
            set {
                this.maxTotalPriceField = value;
            }
        }
        
        /// <remarks/>
        public double MinCaratPrice {
            get {
                return this.minCaratPriceField;
            }
            set {
                this.minCaratPriceField = value;
            }
        }
        
        /// <remarks/>
        public double MaxCaratPrice {
            get {
                return this.maxCaratPriceField;
            }
            set {
                this.maxCaratPriceField = value;
            }
        }
        
        /// <remarks/>
        public double MinDiscountPercent {
            get {
                return this.minDiscountPercentField;
            }
            set {
                this.minDiscountPercentField = value;
            }
        }
        
        /// <remarks/>
        public double MaxDiscountPercent {
            get {
                return this.maxDiscountPercentField;
            }
            set {
                this.maxDiscountPercentField = value;
            }
        }
        
        /// <remarks/>
        public double MinRatio {
            get {
                return this.minRatioField;
            }
            set {
                this.minRatioField = value;
            }
        }
        
        /// <remarks/>
        public double MaxRatio {
            get {
                return this.maxRatioField;
            }
            set {
                this.maxRatioField = value;
            }
        }
        
        /// <remarks/>
        public decimal Markup {
            get {
                return this.markupField;
            }
            set {
                this.markupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> DiamondID {
            get {
                return this.diamondIDField;
            }
            set {
                this.diamondIDField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlyGuaranteed {
            get {
                return this.onlyGuaranteedField;
            }
            set {
                this.onlyGuaranteedField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludesCert {
            get {
                return this.includesCertField;
            }
            set {
                this.includesCertField = value;
            }
        }
        
        /// <remarks/>
        public bool Includes3DFile {
            get {
                return this.includes3DFileField;
            }
            set {
                this.includes3DFileField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludesImage {
            get {
                return this.includesImageField;
            }
            set {
                this.includesImageField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlyMatchedPair {
            get {
                return this.onlyMatchedPairField;
            }
            set {
                this.onlyMatchedPairField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlyMatchedPairSeparable {
            get {
                return this.onlyMatchedPairSeparableField;
            }
            set {
                this.onlyMatchedPairSeparableField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeTreatments {
            get {
                return this.includeTreatmentsField;
            }
            set {
                this.includeTreatmentsField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlyTreatments {
            get {
                return this.onlyTreatmentsField;
            }
            set {
                this.onlyTreatmentsField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeWhiteDiamonds {
            get {
                return this.includeWhiteDiamondsField;
            }
            set {
                this.includeWhiteDiamondsField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeFancyDiamonds {
            get {
                return this.includeFancyDiamondsField;
            }
            set {
                this.includeFancyDiamondsField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeParcelDiamonds {
            get {
                return this.includeParcelDiamondsField;
            }
            set {
                this.includeParcelDiamondsField = value;
            }
        }
        
        /// <remarks/>
        public Locations Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum RapSpecs {
        
        /// <remarks/>
        RAPSPEC_1,
        
        /// <remarks/>
        RAPSPEC_2,
        
        /// <remarks/>
        RAPSPEC_3,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Clarities {
        
        /// <remarks/>
        FL,
        
        /// <remarks/>
        IF,
        
        /// <remarks/>
        VVS1,
        
        /// <remarks/>
        VVS2,
        
        /// <remarks/>
        VS1,
        
        /// <remarks/>
        VS2,
        
        /// <remarks/>
        SI1,
        
        /// <remarks/>
        SI2,
        
        /// <remarks/>
        SI3,
        
        /// <remarks/>
        I1,
        
        /// <remarks/>
        I2,
        
        /// <remarks/>
        I3,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum CuletConditions {
        
        /// <remarks/>
        Pointed,
        
        /// <remarks/>
        Chipped,
        
        /// <remarks/>
        Abraded,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum CuletSizes {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Large,
        
        /// <remarks/>
        Medium,
        
        /// <remarks/>
        Small,
        
        /// <remarks/>
        Very_Small,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Colors {
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        G,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        I,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        O,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        Q,
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        U,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        X,
        
        /// <remarks/>
        Y,
        
        /// <remarks/>
        Z,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Shapes {
        
        /// <remarks/>
        ROUND,
        
        /// <remarks/>
        PEAR,
        
        /// <remarks/>
        PRINCESS,
        
        /// <remarks/>
        SQ_EMERALD,
        
        /// <remarks/>
        MARQUISE,
        
        /// <remarks/>
        OVAL,
        
        /// <remarks/>
        RADIANT,
        
        /// <remarks/>
        EMERALD,
        
        /// <remarks/>
        TRILLIANT,
        
        /// <remarks/>
        HEART,
        
        /// <remarks/>
        EUROPEAN_CUT,
        
        /// <remarks/>
        OLD_MINER,
        
        /// <remarks/>
        FLANDERS,
        
        /// <remarks/>
        CUSHION,
        
        /// <remarks/>
        CUSHION_MODIFIED,
        
        /// <remarks/>
        ASSCHER,
        
        /// <remarks/>
        BAGUETTE,
        
        /// <remarks/>
        KITE,
        
        /// <remarks/>
        STAR,
        
        /// <remarks/>
        OTHER,
        
        /// <remarks/>
        HALF_MOON,
        
        /// <remarks/>
        TRAPEZOID,
        
        /// <remarks/>
        BULLETS,
        
        /// <remarks/>
        HEXAGONAL,
        
        /// <remarks/>
        LOZENGE,
        
        /// <remarks/>
        PENTAGONAL,
        
        /// <remarks/>
        ROSE,
        
        /// <remarks/>
        SHIELD,
        
        /// <remarks/>
        SQUARE,
        
        /// <remarks/>
        TRIANGULAR,
        
        /// <remarks/>
        BRIOLETTE,
        
        /// <remarks/>
        OCTAGONAL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Cuts {
        
        /// <remarks/>
        Ideal,
        
        /// <remarks/>
        Excellent,
        
        /// <remarks/>
        Very_Good,
        
        /// <remarks/>
        Good,
        
        /// <remarks/>
        Fair,
        
        /// <remarks/>
        Poor,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Polishes {
        
        /// <remarks/>
        Ideal,
        
        /// <remarks/>
        Excellent,
        
        /// <remarks/>
        Very_Good,
        
        /// <remarks/>
        Good,
        
        /// <remarks/>
        Fair,
        
        /// <remarks/>
        Poor,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Girdles {
        
        /// <remarks/>
        Extr_Thin,
        
        /// <remarks/>
        Very_Thin,
        
        /// <remarks/>
        Thin,
        
        /// <remarks/>
        Slightly_Thin,
        
        /// <remarks/>
        Medium,
        
        /// <remarks/>
        Slightly_Thick,
        
        /// <remarks/>
        Thick,
        
        /// <remarks/>
        Very_Thick,
        
        /// <remarks/>
        Extr_Thick,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Labs {
        
        /// <remarks/>
        GIA,
        
        /// <remarks/>
        IGI,
        
        /// <remarks/>
        EGL,
        
        /// <remarks/>
        AGS,
        
        /// <remarks/>
        HRD,
        
        /// <remarks/>
        PGS,
        
        /// <remarks/>
        DCLA,
        
        /// <remarks/>
        WGI,
        
        /// <remarks/>
        VGR,
        
        /// <remarks/>
        EGL_USA,
        
        /// <remarks/>
        EGL_ISRAEL,
        
        /// <remarks/>
        EGL_Belgium,
        
        /// <remarks/>
        EGL_international_,
        
        /// <remarks/>
        EGL_South_Africa,
        
        /// <remarks/>
        EGL_Precert,
        
        /// <remarks/>
        NONE,
        
        /// <remarks/>
        OTHER,
        
        /// <remarks/>
        CEGL,
        
        /// <remarks/>
        GCAL,
        
        /// <remarks/>
        CLG,
        
        /// <remarks/>
        IGC,
        
        /// <remarks/>
        IGI_USA,
        
        /// <remarks/>
        IGI_BLG,
        
        /// <remarks/>
        OWN,
        
        /// <remarks/>
        EDGL,
        
        /// <remarks/>
        IDL,
        
        /// <remarks/>
        AGA,
        
        /// <remarks/>
        AGL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Symmetries {
        
        /// <remarks/>
        Excellent,
        
        /// <remarks/>
        Very_Good,
        
        /// <remarks/>
        Good,
        
        /// <remarks/>
        Fair,
        
        /// <remarks/>
        Poor,
        
        /// <remarks/>
        Ideal,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum FancyColors {
        
        /// <remarks/>
        Yellow,
        
        /// <remarks/>
        Pink,
        
        /// <remarks/>
        Blue,
        
        /// <remarks/>
        Red,
        
        /// <remarks/>
        Green,
        
        /// <remarks/>
        Purple,
        
        /// <remarks/>
        Orange,
        
        /// <remarks/>
        Violet,
        
        /// <remarks/>
        Gray,
        
        /// <remarks/>
        Black,
        
        /// <remarks/>
        Brown,
        
        /// <remarks/>
        Champagne,
        
        /// <remarks/>
        Cognac,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Chameleon,
        
        /// <remarks/>
        White,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum FancyIntensities {
        
        /// <remarks/>
        Faint,
        
        /// <remarks/>
        Very_Light,
        
        /// <remarks/>
        Light,
        
        /// <remarks/>
        Fancy_Ligh,
        
        /// <remarks/>
        Fancy,
        
        /// <remarks/>
        Fancy_Dark,
        
        /// <remarks/>
        Fancy_Inte,
        
        /// <remarks/>
        Fancy_Vivi,
        
        /// <remarks/>
        Fancy_Deep,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum FancyOvertones {
        
        /// <remarks/>
        Brownish,
        
        /// <remarks/>
        Greenish,
        
        /// <remarks/>
        Yellowish,
        
        /// <remarks/>
        Pinkish,
        
        /// <remarks/>
        Purplish,
        
        /// <remarks/>
        Grayish,
        
        /// <remarks/>
        Orangey,
        
        /// <remarks/>
        Reddish,
        
        /// <remarks/>
        Bluish,
        
        /// <remarks/>
        None,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Treatments {
        
        /// <remarks/>
        Laser_Drilled,
        
        /// <remarks/>
        Irradiated,
        
        /// <remarks/>
        Clarity_Enhanced,
        
        /// <remarks/>
        Color_Enhanced,
        
        /// <remarks/>
        HPHT,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum FluorescenceColors {
        
        /// <remarks/>
        Blue,
        
        /// <remarks/>
        Yellow,
        
        /// <remarks/>
        Green,
        
        /// <remarks/>
        Red,
        
        /// <remarks/>
        Orange,
        
        /// <remarks/>
        White,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum FluorescenceIntensities {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Very_Slight,
        
        /// <remarks/>
        Faint,
        
        /// <remarks/>
        Medium,
        
        /// <remarks/>
        Strong,
        
        /// <remarks/>
        Very_Strong,
        
        /// <remarks/>
        Slight,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://technet.rapaport.com/")]
    public enum Locations {
        
        /// <remarks/>
        USA,
        
        /// <remarks/>
        New_York,
        
        /// <remarks/>
        Los_Angeles,
        
        /// <remarks/>
        Chicago,
        
        /// <remarks/>
        India,
        
        /// <remarks/>
        Israel,
        
        /// <remarks/>
        Europe,
        
        /// <remarks/>
        Belgium,
        
        /// <remarks/>
        Hong_Kong,
        
        /// <remarks/>
        China,
        
        /// <remarks/>
        All,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LoginCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InitCompletedEventHandler(object sender, InitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RapNetInventoryLinkParameters Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RapNetInventoryLinkParameters)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDiamondsCompletedEventHandler(object sender, GetDiamondsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiamondsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiamondsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDiamondCompletedEventHandler(object sender, GetDiamondCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiamondCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiamondCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591